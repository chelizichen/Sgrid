syntax = "proto3";

package SgridProtocol;

import "google/protobuf/empty.proto";

option go_package = ".;protocol";

message queryIdReq {
    int32 id = 1;
}

message releaseTarget{
    int32 port = 1;
    string ip = 2;
    int32 gridId = 3;
}

message releaseServerReq{
    string serverName = 1;
    string filePath = 2;
    string serverLanguage = 3;
    string serverProtocol = 4;
    string execPath = 5;
    repeated releaseTarget servantGrids = 6;
    int32 servantId = 7;
}

message patchServerReq{
    repeated patchServerDto req = 1;
}

// 单个拉起 不涉及服务文件覆盖
message patchServerDto{
    string execPath = 1; // 执行路径
    string serverName = 2; // 服务名，用于定位
    int32 servantId = 3;
    int32 gridId = 4;
    string host = 5;
    string serverLanguage = 6;
    string serverProtocol = 7;
    int32 port = 8;
}


message basicResp {
    int32 code = 1;
    string message = 2;
}

// 文件块消息定义
message FileChunk {
    bytes data = 1; // 文件内容块
    int64 offset = 2; // 该块在文件中的偏移量
    string serverName = 3;
    string fileHash = 4;
    int32 index = 5;
}

message FileResp {
    string msg = 1;
    int32 code = 2;
}

message ShutdownGridReq{
    repeated ShutdownGridInfo req = 1;
}

message ShutdownGridInfo{
    int32 pid = 1;  // PID
    int32 gridId = 2; // 网格名称
    string host = 3; // 主机
    int32 port = 4; // 端口
}


message GetLogFileByHostReq{
    string host = 1;
    string serverName = 2;
    int64 gridId = 3;
}



message GetLogFileByHostResp{
    repeated string data = 1;
    int64 code = 2;
    string message = 3;
}

message GetLogByFileReq{
    uint32 logType = 1;
    string keyword = 2;
    string host = 3;
    string serverName = 4;
    uint32 gridId = 5;
    string logFileName = 6;
    uint32 len = 7;
}

message GetLogByFileResp{
    repeated string data = 1;
    int64 total = 2;
}

message GetPidInfoReq{
    repeated HostPids hostPids = 1;
}

message HostPids{
    string host = 1;
    int64 gridId = 2;
}

message HostPidInfo{
    int32 pid           = 1;
    string stat         = 2;
    float cpu           = 3;
    int64 threads       = 4;
    string name         = 5;
    string isRuning     = 6;
    uint64 memoryStack  = 7;
    uint64 memoryData   = 8;
}

message GetPidInfoResp{
    repeated HostPidInfo data = 1;
}

message DeletePackageReq{
    int32   id              = 1;
    string  serverName      = 2;
    string  filePath        = 3;
}

message GetSystemInfoResp{
    SystemInfo data        = 1;
    int64      code        = 2;
    string     message     = 3;
}

message SystemInfo{
    string host             = 1;    // host
    string cpuPercent       = 2;    // cpu使用率
    string memoryPercent    = 3;    // 内存使用率
    string nodes            = 4;    // 服务总数
    string cpuLength        = 5;    // cpu数量核数
    string memorySize       = 6;    // 内存大小
}

message NotifyReq{
    int64 gridId             = 1;    // 节点ID gridId
    string info              = 2;    // 告警信息 info
    string serverName        = 3;    // 服务名
}

message InvokeWithCmdReq{
    string cmd              = 1; // 命令
    int64 gridId            = 2; // 节点ID
    string invokeId         = 3; // 任务标识
}

message InvokeWithCmdRsp{
    string data             = 1; // 返回结果
    int64 gridId            = 2; // 节点ID
    string invokeId         = 3; // 任务标识
}

// 文件传输服务定义
service FileTransferService {
    // 双向流式 RPC 用于文件传输
    rpc StreamFile(stream FileChunk) returns (stream FileResp) {}

    // 发布服务
    rpc ReleaseServerByPackage(releaseServerReq)returns(basicResp){}

    // 拉起服务
    rpc PatchServer(patchServerReq)returns(basicResp){}

    // 关闭指定节点服务
    rpc ShutdownGrid(ShutdownGridReq)returns(basicResp){}

    // 获取服务日志列表
    rpc GetLogFileByHost(GetLogFileByHostReq)returns(GetLogFileByHostResp){}

    // 获取服务日志
    rpc GetLogByFile(GetLogByFileReq)returns(GetLogByFileResp){}

    // 获取Pid信息 checkAlive
    rpc GetPidInfo(GetPidInfoReq)returns(GetPidInfoResp){}

    // 删除服务包
    rpc DeletePacakge(DeletePackageReq)returns(basicResp){}

    // 获取服务信息
    rpc GetSystemInfo(google.protobuf.Empty)returns(GetSystemInfoResp){}

    // 服务告警
    rpc Notify(NotifyReq)returns(basicResp){}

    rpc InvokeWithCmd(InvokeWithCmdReq)returns(InvokeWithCmdRsp){}
}
